/**
 * Deep Thought Administration API
 * This is the Deep Thought Administration API. You can find out more about Deep Thought at [https://github.com/bizaio/deepthought](https://github.com/bizaio/deepthought) or on the [DataRight.io Slack, #oss](https://join.slack.com/t/datarightio/shared_invite/enQtNzAyNTI2MjA2MzU1LTU1NGE4MmQ2N2JiZWI2ODA5MTQ2N2Q0NTRmYmM0OWRlM2U5YzA3NzU5NDYyODlhNjRmNzU3ZDZmNTI0MDE3NjY).
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { DioBankBranch } from '../model/dioBankBranch';
import { ValidationListException } from '../model/validationListException';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class BranchAdminService {

    protected basePath = 'http://localhost:8080/dio-au';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create a Branch
     * Creates and Returns a new Branch
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createBranch(body?: DioBankBranch, observe?: 'body', reportProgress?: boolean): Observable<DioBankBranch>;
    public createBranch(body?: DioBankBranch, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DioBankBranch>>;
    public createBranch(body?: DioBankBranch, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DioBankBranch>>;
    public createBranch(body?: DioBankBranch, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (deepthought_auth) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<DioBankBranch>('post',`${this.basePath}/v1/branch`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a single Branch
     * Deletes a Branch
     * @param branchId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteBranch(branchId: string, observe?: 'body', reportProgress?: boolean): Observable<DioBankBranch>;
    public deleteBranch(branchId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DioBankBranch>>;
    public deleteBranch(branchId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DioBankBranch>>;
    public deleteBranch(branchId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (branchId === null || branchId === undefined) {
            throw new Error('Required parameter branchId was null or undefined when calling deleteBranch.');
        }

        let headers = this.defaultHeaders;

        // authentication (deepthought_auth) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DioBankBranch>('delete',`${this.basePath}/v1/branch/${encodeURIComponent(String(branchId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a single Branch
     * Returns a single branch entry
     * @param branchId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBranch(branchId: string, observe?: 'body', reportProgress?: boolean): Observable<DioBankBranch>;
    public getBranch(branchId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DioBankBranch>>;
    public getBranch(branchId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DioBankBranch>>;
    public getBranch(branchId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (branchId === null || branchId === undefined) {
            throw new Error('Required parameter branchId was null or undefined when calling getBranch.');
        }

        let headers = this.defaultHeaders;

        // authentication (deepthought_auth) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DioBankBranch>('get',`${this.basePath}/v1/branch/${encodeURIComponent(String(branchId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List all Branches
     * List all Branches
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listBranches(observe?: 'body', reportProgress?: boolean): Observable<Array<DioBankBranch>>;
    public listBranches(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DioBankBranch>>>;
    public listBranches(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DioBankBranch>>>;
    public listBranches(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (deepthought_auth) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<DioBankBranch>>('get',`${this.basePath}/v1/branch`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a single Branch
     * Updates and Returns an existing Branch
     * @param branchId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateBranch(branchId: string, body?: DioBankBranch, observe?: 'body', reportProgress?: boolean): Observable<DioBankBranch>;
    public updateBranch(branchId: string, body?: DioBankBranch, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DioBankBranch>>;
    public updateBranch(branchId: string, body?: DioBankBranch, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DioBankBranch>>;
    public updateBranch(branchId: string, body?: DioBankBranch, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (branchId === null || branchId === undefined) {
            throw new Error('Required parameter branchId was null or undefined when calling updateBranch.');
        }


        let headers = this.defaultHeaders;

        // authentication (deepthought_auth) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<DioBankBranch>('put',`${this.basePath}/v1/branch/${encodeURIComponent(String(branchId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
